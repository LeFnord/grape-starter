#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'gli'
require 'starter'

include GLI::App

program_desc 'Create initial grape api skeleton'

version Starter::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'overwrites existend stuff'
switch [:f, :force], negatable: false

desc 'Creates initial api skeleton'
arg_name 'awesome_api'
command :new do |c|
  c.flag [:p, :prefix],
         desc: 'sets the prefix of the API'
  c.flag [:o, :orm],
         desc: 'create files for the specified ORM, available: sequel, activerecord (ar)'

  c.action do |global_options, options, args|
    dest = args.empty? ? nil : File.join(Dir.getwd, args.first)

    case
    when args.empty? || dest.nil?
      exit_now! 'no name given: grape-starter new project'
    when Dir.exist?(dest) && !global_options[:force]
      exit_now! 'project exist: -f to overwrite'
    else
      starter_gem = Gem::Specification.find_by_name('grape-starter').gem_dir
      src = File.join(starter_gem, 'template', '.')

      Starter::Build.new!(args.first, src, dest, options)
      $stdout.puts "created: #{args.first}"

      # after creating tasks
      FileUtils.cd(dest) do
        system('bundle install')
        `bundle exec rubocop -a`
        system("git init; git add .; git commit -m 'initial commit'")
      end
    end
  end
end

desc 'Adds given new resource'
long_desc "Adds given resource, hereby the numerus of the provided
resource would be respected to create singular or plural endpoints"
arg_name 'resource [post* get* put* patch* delete*]'
command :add do |c|
  c.switch [:e, :entity], negatable: false,
           desc: 'adds entity file'
  c.switch [:o, :orm], negatable: false,
           desc: 'inherit from ORM'
  c.switch [:m, :migration], negatable: false,
           desc: 'create also migration file'

  c.action do |global_options, options, args|
    exit_now! 'no resource given' if args.empty?

    resource = args.shift
    set = args

    begin
      builder_options = global_options.merge(set: set).merge(options)
      created_files = Starter::Build.add!(resource, builder_options)

      `bundle exec rubocop -a #{created_files.join(' ')}`
      $stdout.puts "added resource: #{resource}"
    rescue => e
      exit_now! e
    end
  end
end

desc 'Removes given resource'
arg_name 'resource'
command :rm do |c|
  c.desc 'removes also entity file'
  c.switch [:e, :entity], negatable: false

  c.action do |_global_options, options, args|
    exit_now! 'no resource given' if args.empty?
    resource = args.first

    Starter::Build.remove!(resource, options)

    $stdout.puts "removed resource: #{resource}"
  end
end

desc 'Creates from given OAPI spec'
long_desc 'Import YAML or JSON OAPI specification given by path argument'
arg_name 'path'
command :import do |c|
  c.action do |_global_options, _options, args|
    path = args.first
    exit_now! 'no path given' if path.blank?
    exit_now! "file under #{path} not exists" unless File.exist?(path)

    Starter::Import.do_it!(path)
  end
end


pre do |_global, _command, _options, _args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |_exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
